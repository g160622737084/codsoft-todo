#include <stdio.h> 
#include <stdlib.h> 
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#define PORT 12345 
#define BUFFER_SIZE 1024
int main() {
int sockfd; 
struct sockaddr_in server_addr, client_addr; 
socklen_t addr_len = sizeof(client_addr); 
char buffer[BUFFER_SIZE]; 
int n;
// Create a UDP socket 
if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) 
{ 
perror("socket creation failed"); 
exit(EXIT_FAILURE); 
}
// Set up the server address structure 
memset(&server_addr, 0, sizeof(server_addr)); 
server_addr.sin_family = AF_INET; 
server_addr.sin_addr.s_addr = INADDR_ANY; 
server_addr.sin_port = htons(PORT);
// Bind the socket to the address and port 
if (bind(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) 
{ perror("bind failed"); 
exit(EXIT_FAILURE);
close(sockfd);
}
printf("Server is running. Type messages to send to clients.\n");
while (1) {
// Receive message from the client
n=recvfrom(sockfd, (char *)buffer, BUFFER_SIZE, 0, (struct sockaddr *)&client_addr,
&addr_len);
if (n < 0) {
perror("recvfrom failed");
continue;
} 
buffer[n] = '\0';
// Print received message
printf("Client: %s\n", buffer);
// Send the same message back to the client
sendto(sockfd, (const char *)buffer, n, 0, (struct sockaddr *)&client_addr, addr_len);
}
close(sockfd);
return 0;
}
