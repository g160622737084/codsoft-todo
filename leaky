#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>

#define NO_OF_PACKETS 10

// Function to simulate random number generation for packet sizes
int arc4rand(int a) {
    int rn = (random() % 10) % a;
    return rn == 0 ? 1 : rn;
}

int main() {
    int packet_sz[NO_OF_PACKETS], i, clk, b_size, o_rate, p_sz_rm = 0, p_sz, p_time, op;

    // Generate random packet sizes
    for (i = 0; i < NO_OF_PACKETS; i++) {
        packet_sz[i] = arc4rand(6) * 10;
    }

    // Print the generated packet sizes
    for (i = 0; i < NO_OF_PACKETS; i++) {
        printf("\nPacket[%d]: %d bytes", i, packet_sz[i]);
    }

    // Get output rate and bucket size from user
    printf("\nEnter the Output rate: ");
    scanf("%d", &o_rate);
    printf("Enter the Bucket Size: ");
    scanf("%d", &b_size);

    // Check for invalid input values
    if (o_rate <= 0 || b_size <= 0) {
        printf("\nInvalid output rate or bucket size. Please enter positive values.\n");
        return 1;
    }

    // Process each packet
    for (i = 0; i < NO_OF_PACKETS; i++) {
        if ((packet_sz[i] + p_sz_rm) > b_size) {
            if (packet_sz[i] > b_size) {
                printf("\nIncoming packet size (%d bytes) is greater than bucket capacity (%d bytes) - PACKET REJECTED", packet_sz[i], b_size);
            } else {
                printf("\nBucket capacity exceeded - PACKET REJECTED!");
            }
        } else {
            p_sz_rm += packet_sz[i];
            printf("\n\nIncoming Packet size: %d bytes", packet_sz[i]);
            printf("\nBytes remaining to transmit: %d bytes", p_sz_rm);

            // Simulate transmission time
            p_time = arc4rand(4) * 10;
            printf("\nTime left for transmission: %d units", p_time);

            for (clk = 10; clk <= p_time; clk += 10) {
                sleep(1);
                if (p_sz_rm) {
                    if (p_sz_rm <= o_rate) {
                        op = p_sz_rm;
                        p_sz_rm = 0;
                    } else {
                        op = o_rate;
                        p_sz_rm -= o_rate;
                    }
                    printf("\nPacket of size %d bytes transmitted", op);
                    printf(" -- Bytes remaining to transmit: %d", p_sz_rm);
                } else {
                    printf("\nNo packets to transmit!");
                    break;  // Exit if no more data to transmit
                }
            }
        }
    }

    return 0;
}
